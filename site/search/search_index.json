{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>MicroKeras is a lightweight neural network library.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install microkeras\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>import microkeras as mk\n\n# Your quick start code here\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>Activations</li> <li>Datasets</li> <li>Layers</li> <li>Losses</li> <li>Models</li> <li>Operations</li> <li>Optimizers</li> </ul>"},{"location":"Api_Reference/Layers/Dense/Build_Method/","title":"Build Method","text":""},{"location":"Api_Reference/Layers/Dense/Build_Method/#microkeras.layers.dense.build-functions","title":"Functions","text":""},{"location":"Api_Reference/Layers/Dense/Build_Method/#microkeras.layers.dense.build.build","title":"<code>build(self, input_shape)</code>","text":"<p>Build the dense layer by initializing weights and biases.</p> <p>Parameters:</p> Name Type Description Default <code>input_shape</code> <code>int or tuple</code> <p>The shape of the input to this layer. If tuple, the first element is used.</p> required Example <pre><code>layer = Dense(64, activation='relu')\nlayer.build(input_shape=(128,))\nprint(layer.W.shape)  # Output: (64, 128)\nprint(layer.b.shape)  # Output: (64, 1)\n</code></pre> Source code in <code>microkeras/layers/dense/build.py</code> <pre><code>def build(self, input_shape):\n    \"\"\"\n    Build the dense layer by initializing weights and biases.\n\n    Args:\n        input_shape (int or tuple): The shape of the input to this layer. If tuple, the first element is used.\n\n    Example:\n        ```python\n        layer = Dense(64, activation='relu')\n        layer.build(input_shape=(128,))\n        print(layer.W.shape)  # Output: (64, 128)\n        print(layer.b.shape)  # Output: (64, 1)\n        ```\n    \"\"\"\n    if isinstance(input_shape, tuple):\n        self.input_shape = input_shape[0]\n    else:\n        self.input_shape = input_shape\n    self.W = np.random.rand(self.units, self.input_shape) - 0.5\n    self.b = np.random.rand(self.units, 1) - 0.5\n</code></pre>"},{"location":"Api_Reference/Layers/Dense/Copy_Method/","title":"Copy Method","text":""},{"location":"Api_Reference/Layers/Dense/Copy_Method/#microkeras.layers.dense.copy-functions","title":"Functions","text":""},{"location":"Api_Reference/Layers/Dense/Copy_Method/#microkeras.layers.dense.copy.copy","title":"<code>copy(self)</code>","text":"<p>Create a deep copy of the dense layer.</p> <p>Returns:</p> Name Type Description <code>Dense</code> <p>A new Dense layer instance with copied attributes and parameters.</p> Example <pre><code>original_layer = Dense(32, activation='sigmoid', input_shape=(64,))\noriginal_layer.build(input_shape=(64,))\n\ncopied_layer = original_layer.copy()\nprint(np.array_equal(original_layer.W, copied_layer.W))  # Output: True\nprint(id(original_layer.W) != id(copied_layer.W))  # Output: True\n</code></pre> Source code in <code>microkeras/layers/dense/copy.py</code> <pre><code>def copy(self):\n    \"\"\"\n    Create a deep copy of the dense layer.\n\n    Returns:\n        Dense: A new Dense layer instance with copied attributes and parameters.\n\n    Example:\n        ```python\n        original_layer = Dense(32, activation='sigmoid', input_shape=(64,))\n        original_layer.build(input_shape=(64,))\n\n        copied_layer = original_layer.copy()\n        print(np.array_equal(original_layer.W, copied_layer.W))  # Output: True\n        print(id(original_layer.W) != id(copied_layer.W))  # Output: True\n        ```\n    \"\"\"\n    new_layer = self.__class__(self.units,\n                               activation=self.activation,\n                               input_shape=self.input_shape)\n    if self.W is not None:\n        new_layer.W = cp.deepcopy(self.W)\n    if self.b is not None:\n        new_layer.b = cp.deepcopy(self.b)\n    return new_layer\n</code></pre>"},{"location":"Api_Reference/Layers/Dense/Dense_Class/","title":"Dense Class","text":"<p>Represents a dense (fully connected) layer in a neural network.</p> <p>Attributes:</p> Name Type Description <code>units</code> <code>int</code> <p>The number of neurons in the layer.</p> <code>activation</code> <code>str or None</code> <p>The activation function to use.</p> <code>input_shape</code> <code>int or tuple</code> <p>The shape of the input to this layer.</p> Example <pre><code># Create a dense layer with 64 units and ReLU activation\nlayer = Dense(64, activation='relu', input_shape=(128,))\n\n# Build the layer\nlayer.build(input_shape=(128,))\n\n# Use the layer in a model\nx = np.random.randn(32, 128)  # Batch of 32 samples\noutput = layer.forward(x)\nprint(output.shape)  # Output: (32, 64)\n</code></pre> Source code in <code>microkeras/layers/dense/dense.py</code> <pre><code>class Dense:\n    \"\"\"\n    Represents a dense (fully connected) layer in a neural network.\n\n    Attributes:\n        units (int): The number of neurons in the layer.\n        activation (str or None): The activation function to use.\n        input_shape (int or tuple): The shape of the input to this layer.\n\n    Example:\n        ```python\n        # Create a dense layer with 64 units and ReLU activation\n        layer = Dense(64, activation='relu', input_shape=(128,))\n\n        # Build the layer\n        layer.build(input_shape=(128,))\n\n        # Use the layer in a model\n        x = np.random.randn(32, 128)  # Batch of 32 samples\n        output = layer.forward(x)\n        print(output.shape)  # Output: (32, 64)\n        ```\n    \"\"\"\n    def __init__(self, units, activation=None, input_shape=None):\n        \"\"\"\n        Initialize the dense layer.\n\n        Args:\n            units (int): The number of neurons in the layer.\n            activation (str or None): The activation function to use. Default is None.\n            input_shape (int or tuple): The shape of the input to this layer. Default is None.\n        \"\"\"\n        initialize(self, units, activation, input_shape)\n\n    build = build\n    copy = copy\n</code></pre>"},{"location":"Api_Reference/Layers/Dense/Dense_Class/#microkeras.layers.Dense-functions","title":"Functions","text":""},{"location":"Api_Reference/Layers/Dense/Dense_Class/#microkeras.layers.Dense.__init__","title":"<code>__init__(units, activation=None, input_shape=None)</code>","text":"<p>Initialize the dense layer.</p> <p>Parameters:</p> Name Type Description Default <code>units</code> <code>int</code> <p>The number of neurons in the layer.</p> required <code>activation</code> <code>str or None</code> <p>The activation function to use. Default is None.</p> <code>None</code> <code>input_shape</code> <code>int or tuple</code> <p>The shape of the input to this layer. Default is None.</p> <code>None</code> Source code in <code>microkeras/layers/dense/dense.py</code> <pre><code>def __init__(self, units, activation=None, input_shape=None):\n    \"\"\"\n    Initialize the dense layer.\n\n    Args:\n        units (int): The number of neurons in the layer.\n        activation (str or None): The activation function to use. Default is None.\n        input_shape (int or tuple): The shape of the input to this layer. Default is None.\n    \"\"\"\n    initialize(self, units, activation, input_shape)\n</code></pre>"},{"location":"Api_Reference/Layers/Dense/Initialize_Method/","title":"Initialize Method","text":""},{"location":"Api_Reference/Layers/Dense/Initialize_Method/#microkeras.layers.dense.initialize-functions","title":"Functions","text":""},{"location":"Api_Reference/Layers/Dense/Initialize_Method/#microkeras.layers.dense.initialize.initialize","title":"<code>initialize(self, units, activation, input_shape)</code>","text":"<p>Initialize the attributes of the dense layer.</p> <p>Parameters:</p> Name Type Description Default <code>units</code> <code>int</code> <p>The number of neurons in the layer.</p> required <code>activation</code> <code>str or None</code> <p>The activation function to use.</p> required <code>input_shape</code> <code>int or tuple</code> <p>The shape of the input to this layer.</p> required Example <pre><code>layer = Dense(64)\nprint(layer.units)  # Output: 64\nprint(layer.activation)  # Output: None\nprint(layer.W)  # Output: None (not yet built)\n\nlayer.build(input_shape=(128,))\nprint(layer.W.shape)  # Output: (64, 128)\nprint(layer.b.shape)  # Output: (64, 1)\n</code></pre> Source code in <code>microkeras/layers/dense/initialize.py</code> <pre><code>def initialize(self, units, activation, input_shape):\n    \"\"\"\n    Initialize the attributes of the dense layer.\n\n    Args:\n        units (int): The number of neurons in the layer.\n        activation (str or None): The activation function to use.\n        input_shape (int or tuple): The shape of the input to this layer.\n\n    Example:\n        ```python\n        layer = Dense(64)\n        print(layer.units)  # Output: 64\n        print(layer.activation)  # Output: None\n        print(layer.W)  # Output: None (not yet built)\n\n        layer.build(input_shape=(128,))\n        print(layer.W.shape)  # Output: (64, 128)\n        print(layer.b.shape)  # Output: (64, 1)\n        ```\n    \"\"\"\n    self.units = units\n    self.activation = activation\n    self.input_shape = input_shape\n    self.batch_size = None\n    self.W = None\n    self.b = None\n    self.Z = None\n    self.A = None\n    self.dZ = None\n    self.dW = None\n    self.db = None\n</code></pre>"},{"location":"Api_Reference/Models/Sequential/Add_Method/","title":"Add Method","text":""},{"location":"Api_Reference/Models/Sequential/Add_Method/#microkeras.models.sequential.add-functions","title":"Functions","text":""},{"location":"Api_Reference/Models/Sequential/Add_Method/#microkeras.models.sequential.add.add","title":"<code>add(self, layer)</code>","text":"<p>Add a layer to the Sequential model.</p> <p>If the layer doesn't have an input_shape and there are existing layers, the input shape is inferred from the previous layer's units.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>Layer</code> <p>The layer to be added to the model.</p> required Example <pre><code>model = Sequential([])\nmodel.add(Dense(64, activation='relu', input_shape=(784,)))\nmodel.add(Dense(10, activation='softmax'))\n</code></pre> Source code in <code>microkeras/models/sequential/add.py</code> <pre><code>def add(self, layer):\n    \"\"\"\n    Add a layer to the Sequential model.\n\n    If the layer doesn't have an input_shape and there are existing layers,\n    the input shape is inferred from the previous layer's units.\n\n    Args:\n        layer (Layer): The layer to be added to the model.\n\n    Example:\n        ```python\n        model = Sequential([])\n        model.add(Dense(64, activation='relu', input_shape=(784,)))\n        model.add(Dense(10, activation='softmax'))\n        ```\n    \"\"\"\n    if self.layers and layer.input_shape is None:\n        prev_layer = self.layers[-1]\n        layer.input_shape = prev_layer.units\n    self.layers.append(layer)\n</code></pre>"},{"location":"Api_Reference/Models/Sequential/Build_Method/","title":"Build Method","text":""},{"location":"Api_Reference/Models/Sequential/Build_Method/#microkeras.models.sequential.build-functions","title":"Functions","text":""},{"location":"Api_Reference/Models/Sequential/Build_Method/#microkeras.models.sequential.build.build","title":"<code>build(self)</code>","text":"<p>This method calls the build method of each layer in the model, initializing their weights and biases.</p> Source code in <code>microkeras/models/sequential/build.py</code> <pre><code>def build(self):\n    \"\"\"\n    This method calls the build method of each layer in the model,\n    initializing their weights and biases.\n    \"\"\"\n    for layer in self.layers:\n        layer.build(layer.input_shape)\n</code></pre>"},{"location":"Api_Reference/Models/Sequential/Initialize_Method/","title":"Initialize Method","text":""},{"location":"Api_Reference/Models/Sequential/Initialize_Method/#microkeras.models.sequential.initialize-functions","title":"Functions","text":""},{"location":"Api_Reference/Models/Sequential/Initialize_Method/#microkeras.models.sequential.initialize.initialize","title":"<code>initialize(self, layers)</code>","text":"<p>Initialize the Sequential model with given layers.</p> <p>Parameters:</p> Name Type Description Default <code>layers</code> <code>list</code> <p>List of Layer instances to add to the model.</p> required Note <p>This method is called internally by the Sequential constructor.</p> Source code in <code>microkeras/models/sequential/initialize.py</code> <pre><code>def initialize(self, layers):\n    \"\"\"\n    Initialize the Sequential model with given layers.\n\n    Args:\n        layers (list): List of Layer instances to add to the model.\n\n    Note:\n        This method is called internally by the Sequential constructor.\n    \"\"\"\n    self.layers = []\n    for layer in layers:\n        self.add(layer)\n    self.build()\n</code></pre>"},{"location":"Api_Reference/Models/Sequential/Load_Method/","title":"Load Method","text":""},{"location":"Api_Reference/Models/Sequential/Load_Method/#microkeras.models.sequential.load-functions","title":"Functions","text":""},{"location":"Api_Reference/Models/Sequential/Load_Method/#microkeras.models.sequential.load.load","title":"<code>load(cls, filename)</code>","text":"<p>Load a Sequential model from a file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the file containing the saved model.</p> required <p>Returns:</p> Name Type Description <code>Sequential</code> <p>A new Sequential model instance loaded from the file.</p> Example <pre><code>loaded_model = Sequential.load('my_model.json')\n</code></pre> Source code in <code>microkeras/models/sequential/load.py</code> <pre><code>def load(cls, filename):\n    \"\"\"\n    Load a Sequential model from a file.\n\n    Args:\n        filename (str): Path to the file containing the saved model.\n\n    Returns:\n        Sequential: A new Sequential model instance loaded from the file.\n\n    Example:\n        ```python\n        loaded_model = Sequential.load('my_model.json')\n        ```\n    \"\"\"\n    from microkeras.layers import Dense\n\n    with open(filename, 'r') as f:\n        model_data = json.load(f)\n\n    new_model = cls([])\n\n    for layer_data in model_data['layers']:\n        layer = Dense(\n            units=layer_data['units'],\n            activation=layer_data['activation'],\n            input_shape=layer_data['input_shape']\n        )\n        layer.W = np.array(layer_data['weights'])\n        layer.b = np.array(layer_data['biases'])\n        new_model.add(layer)\n\n    return new_model\n</code></pre>"},{"location":"Api_Reference/Models/Sequential/Predict_Method/","title":"Predict Method","text":""},{"location":"Api_Reference/Models/Sequential/Predict_Method/#microkeras.models.sequential.predict-functions","title":"Functions","text":""},{"location":"Api_Reference/Models/Sequential/Predict_Method/#microkeras.models.sequential.predict.predict","title":"<code>predict(self, X)</code>","text":"<p>Generate output predictions for the input samples.</p> <p>Parameters:</p> Name Type Description Default <code>X</code> <code>ndarray</code> <p>Input data.</p> required <p>Returns:</p> Type Description <p>numpy.ndarray: Predictions for the input data.</p> Example <pre><code>predictions = model.predict(X_test)\n</code></pre> Source code in <code>microkeras/models/sequential/predict.py</code> <pre><code>def predict(self, X):\n    \"\"\"\n    Generate output predictions for the input samples.\n\n    Args:\n        X (numpy.ndarray): Input data.\n\n    Returns:\n        numpy.ndarray: Predictions for the input data.\n\n    Example:\n        ```python\n        predictions = model.predict(X_test)\n        ```\n    \"\"\"\n    # Transpose the input data\n    X = X.T\n\n    # Forward pass\n    forward(self, X)\n\n    # Return the output of the last layer\n    predictions = self.layers[-1].A\n\n    # Transpose the predictions to match the expected output shape\n    return predictions.T\n</code></pre>"},{"location":"Api_Reference/Models/Sequential/Save_Method/","title":"Save Method","text":""},{"location":"Api_Reference/Models/Sequential/Save_Method/#microkeras.models.sequential.save-functions","title":"Functions","text":""},{"location":"Api_Reference/Models/Sequential/Save_Method/#microkeras.models.sequential.save.save","title":"<code>save(self, filename)</code>","text":"<p>Save the Sequential model to a file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path where the model should be saved.</p> required Example <pre><code>model.save('my_model.json')\n</code></pre> Source code in <code>microkeras/models/sequential/save.py</code> <pre><code>def save(self, filename):\n    \"\"\"\n    Save the Sequential model to a file.\n\n    Args:\n        filename (str): Path where the model should be saved.\n\n    Example:\n        ```python\n        model.save('my_model.json')\n        ```\n    \"\"\"\n    model_data = {\n        'layers': []\n    }\n    for layer in self.layers:\n        layer_data = {\n            'type': 'Dense',\n            'units': layer.units,\n            'activation': layer.activation,\n            'input_shape': layer.input_shape,\n            'weights': layer.W.tolist(),\n            'biases': layer.b.tolist()\n        }\n        model_data['layers'].append(layer_data)\n\n    with open(filename, 'w') as f:\n        json.dump(model_data, f)\n</code></pre>"},{"location":"Api_Reference/Models/Sequential/Sequential_Class/","title":"Sequential Class","text":"<p>The Sequential model is a linear stack of layers, useful for straightforward neural network architectures. Layers are added via the constructor or through the <code>.add()</code> method.</p> <p>Attributes:</p> Name Type Description <code>layers</code> <code>list</code> <p>List of Layer instances in the model.</p> Example <pre><code>model = Sequential([\n    Dense(64, activation='relu', input_shape=(784,)),\n    Dense(10, activation='softmax')\n])\n</code></pre> Source code in <code>microkeras/models/sequential/sequential.py</code> <pre><code>class Sequential:\n    \"\"\"\n    The Sequential model is a linear stack of layers, useful for\n    straightforward neural network architectures. Layers are added via the constructor\n    or through the `.add()` method.\n\n    Attributes:\n        layers (list): List of Layer instances in the model.\n\n    Example:\n        ```python\n        model = Sequential([\n            Dense(64, activation='relu', input_shape=(784,)),\n            Dense(10, activation='softmax')\n        ])\n        ```\n    \"\"\"\n\n    def __init__(self, layers):\n        \"\"\"\n        Initialize the Sequential model.\n\n        Args:\n            layers (list): Initial list of Layer instances to add to the model.\n        \"\"\"\n        initialize(self, layers)\n        initialize(self, layers)\n\n    add = add\n    build = build\n    copy = copy\n    compile = compile\n    fit = fit\n    evaluate = evaluate\n    predict = predict\n    save = save\n\n    @classmethod\n    def load(cls, filename):\n        \"\"\"\n        Load a model from a file.\n\n        Args:\n            filename (str): Path to the file containing the saved model.\n\n        Returns:\n            Sequential: Loaded model instance.\n\n        Example:\n            ```python\n            loaded_model = Sequential.load('my_model.json')\n            ```\n        \"\"\"\n        return load(cls, filename)\n</code></pre>"},{"location":"Api_Reference/Models/Sequential/Sequential_Class/#microkeras.models.Sequential-functions","title":"Functions","text":""},{"location":"Api_Reference/Models/Sequential/Sequential_Class/#microkeras.models.Sequential.__init__","title":"<code>__init__(layers)</code>","text":"<p>Initialize the Sequential model.</p> <p>Parameters:</p> Name Type Description Default <code>layers</code> <code>list</code> <p>Initial list of Layer instances to add to the model.</p> required Source code in <code>microkeras/models/sequential/sequential.py</code> <pre><code>def __init__(self, layers):\n    \"\"\"\n    Initialize the Sequential model.\n\n    Args:\n        layers (list): Initial list of Layer instances to add to the model.\n    \"\"\"\n    initialize(self, layers)\n    initialize(self, layers)\n</code></pre>"},{"location":"Api_Reference/Models/Sequential/Sequential_Class/#microkeras.models.Sequential.load","title":"<code>load(filename)</code>  <code>classmethod</code>","text":"<p>Load a model from a file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the file containing the saved model.</p> required <p>Returns:</p> Name Type Description <code>Sequential</code> <p>Loaded model instance.</p> Example <pre><code>loaded_model = Sequential.load('my_model.json')\n</code></pre> Source code in <code>microkeras/models/sequential/sequential.py</code> <pre><code>@classmethod\ndef load(cls, filename):\n    \"\"\"\n    Load a model from a file.\n\n    Args:\n        filename (str): Path to the file containing the saved model.\n\n    Returns:\n        Sequential: Loaded model instance.\n\n    Example:\n        ```python\n        loaded_model = Sequential.load('my_model.json')\n        ```\n    \"\"\"\n    return load(cls, filename)\n</code></pre>"}]}